// Mocks generated by Mockito 5.4.4 from annotations
// in movie_finder/test/domain/usecase/usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_finder/core/data_state.dart' as _i2;
import 'package:movie_finder/domain/entities/movie.dart' as _i5;
import 'package:movie_finder/domain/entities/user.dart' as _i7;
import 'package:movie_finder/domain/repositories/auth_repository.dart' as _i6;
import 'package:movie_finder/domain/repositories/movie_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDataState_0<T> extends _i1.SmartFake implements _i2.DataState<T> {
  _FakeDataState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i3.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<List<_i5.Movie>>> getTrendingMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTrendingMovies,
          [],
        ),
        returnValue: _i4.Future<_i2.DataState<List<_i5.Movie>>>.value(
            _FakeDataState_0<List<_i5.Movie>>(
          this,
          Invocation.method(
            #getTrendingMovies,
            [],
          ),
        )),
      ) as _i4.Future<_i2.DataState<List<_i5.Movie>>>);

  @override
  _i4.Future<_i2.DataState<List<_i5.Movie>>> getPopularMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularMovies,
          [],
        ),
        returnValue: _i4.Future<_i2.DataState<List<_i5.Movie>>>.value(
            _FakeDataState_0<List<_i5.Movie>>(
          this,
          Invocation.method(
            #getPopularMovies,
            [],
          ),
        )),
      ) as _i4.Future<_i2.DataState<List<_i5.Movie>>>);

  @override
  _i4.Future<_i2.DataState<List<_i5.Movie>>> getTopRatedMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopRatedMovies,
          [],
        ),
        returnValue: _i4.Future<_i2.DataState<List<_i5.Movie>>>.value(
            _FakeDataState_0<List<_i5.Movie>>(
          this,
          Invocation.method(
            #getTopRatedMovies,
            [],
          ),
        )),
      ) as _i4.Future<_i2.DataState<List<_i5.Movie>>>);

  @override
  _i4.Future<_i2.DataState<_i5.Movie>> getMovieDetails(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetails,
          [id],
        ),
        returnValue: _i4.Future<_i2.DataState<_i5.Movie>>.value(
            _FakeDataState_0<_i5.Movie>(
          this,
          Invocation.method(
            #getMovieDetails,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.DataState<_i5.Movie>>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i6.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<_i7.User>> login(
          Map<String, String>? loginRequest) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [loginRequest],
        ),
        returnValue: _i4.Future<_i2.DataState<_i7.User>>.value(
            _FakeDataState_0<_i7.User>(
          this,
          Invocation.method(
            #login,
            [loginRequest],
          ),
        )),
      ) as _i4.Future<_i2.DataState<_i7.User>>);

  @override
  _i4.Future<_i2.DataState<void>> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue:
            _i4.Future<_i2.DataState<void>>.value(_FakeDataState_0<void>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
      ) as _i4.Future<_i2.DataState<void>>);

  @override
  _i4.Future<bool> isUserLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #isUserLoggedIn,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
